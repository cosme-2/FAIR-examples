/****************************************************************************************************************************************************************************/
/* AVERTISSEMENT: Le format json n’utilise pas les commentaires; un fichier commenté ne peut donc pas être valide. Pour la validation, utilisez les fichiers non commentés. */
/* CAUTION: The json files don’t use comments; so, a commented file cannot be valid. For validation, use the files without comments.                                        */
/****************************************************************************************************************************************************************************/

/****************************************************************************************************************************************************************************/
/* Ceci est un modèle de schéma basé sur des données fictives. L'objectif de ce modèle est d’indiquer les principaux éléments et la structure d'un schéma.                  */
/* Pour un schéma basé sur les données réelles du corpus, utilisez le schéma non annoté.                                                                                    */
/****************************************************************************************************************************************************************************/
/* This is a schema model based on the fictif data. The purpose of this model is to indicate the main elements and schema structure.                                        */
/* For a schema based on the real corpus data, use the not annotated schema.                                                                                                */
/****************************************************************************************************************************************************************************/

/****************************************************************************************************************************************************************************/
/* Encodage des caractères. Certains éléments peuvent contenir les restes des balises XML encodées alors selon les modèles différents                                       */
/* (soit les entités HTML soit l'échappement avec la barre oblique inversée).                                                                                               */
/* Pour plus de détails sur ce point, voir le fichier "README[documentation].md" qui accompagne ce document.                                                                */
/****************************************************************************************************************************************************************************/
/* Character encoding. Some elements can contain the remains of the XML tags which was encoded according to the different models                                            */
/* (either the HTML entities or the escape with the backslash).                                                                                                             */
/* For more details on this point, see the "README [documentation].md" file joined to this documentation.                                                                   */
/****************************************************************************************************************************************************************************/

{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "/NOM_DU_CORPUS.record.schema.json",
    "title": "NOM_DU_CORPUS schema",
    "description": "It is a complete schema for the file with only one record of dataset. It includes the two parts: i) common part for all corpus; ii) specific fields of the given corpus. ",
    "type": "object",
    "properties":
    {
        // DEBUT. Information sur le jeu des données. Cette information est commune à tous les corpus de TELMA
        // BEGIN. Information about dataset. This information is commun for all TELMA corpora.
        "datasetInformation":
        {
            "description": "This is a corpus common informations (title, authors, date of creation, etc.)",
            "type": "object",
            "properties":
            {
                "datasetName":
                {
                    "description": "The name of the dataset",
                    "type": "string"
                },
                "datasetURL":
                {
                    "description": "The web adresse where the dataset is published by TELMA",
                    "type": "string"
                },
                "datasetJsonSchemaURL":
                {
                    "description": "Indicate here where is a json schema for these data. All schema will be stored on GitHub profile of COSME2",
                    "type": "string"
                },
                "datasetAuthors":
                {
                    "description": "The authors of the dataset",
                    "type": "array",
                    "items":
                    {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                    // Il faut au moins un auteur. Les noms des auteurs doivent être uniques
                    // Minium 1 autor. Authors names must be unique
                },
                "datasetCreationDate":
                {
                    "description": "Date (YYYY-MM-DD, for example, 2018-11-13) when this dataset json file was created. For /date/format/ specification see https://json-schema.org/understanding-json-schema/reference/string.html",
                    "type": "string",
                    "format": "date"
                },
                "datasetLicence":
                {
                    "description": "Licence associated with this dataset",
                    "type": "string"
                },
                "datasetStatus":
                {
                    "description": "Mark if the dataset is published or not on TELMA. In TELMA database value 1 means /not published/ and value 2 means /published/. Only can use two defined values /published/ or /not published/",
                    "type": "string",
                    "enum":
                    [
                        "not published",
                        "published"
                    ]
                    // Définir la liste des valeurs autorisées
                    // Define the authorized values list
                }
            },
            "required":
            [
                "datasetName",
                "datasetURL",
                "datasetCreationDate",
                "datasetLicence"
            ]
        },
        // FIN. Information sur le jeu des données. Cette information est commune à tous les corpus de TELMA
        // END. Information about dataset. This information is commun for all TELMA corpora.
 
        /********************************************************************************************************************************************************************************************/
        /* Les différences entre les schémas d'un jeu de données et d'une notice.                                                                                                                   */
        /* i) Dans le fichier d’un jeu de données, toutes les notices sont regroupées comme les éléments d’un tableau (array). Chaque notice, à son tour, est un objet json.                        */
        /* ii) La clé "datasetItems" du jeu de données est remplacée par la clé "datasetItem" dans la notice. (C'est la clé qui regroupe les informations sur la notice).                           */
        /* iii) La clé "datasetPartition" est absente du schéma de la notice. (Cette clé, quand elle est requise, est présente dans le groupe qui contient les informations sur le jeu de données). */                                                            
        /********************************************************************************************************************************************************************************************/
        /* The differences between the dataset and record schemas.                                                                                                                                  */                                                                                                       
        /* i) In a dataset file, all items (item = record) are grouped together like the array elements. Each item, at the same time, is a json object.                                             */
        /* ii) The "datasetItems" key in the dataset is replaced by the "datasetItem" key in the record. (This is the key that contain the record detailed information).                            */
        /* iii) The "datasetPartition" key is not present in the record schema. (This key, when required, is present in the group that contains information about the dataset).                    */                                                               
        /********************************************************************************************************************************************************************************************/

        // DEBUT. Information sur la notices de jeu des données. Ce fichier ne contient qu'une seule notice (qui est un objet json).
        // BEGIN. Information about dataset item (item = record). This file contains only one record (which is a json object).
        "datasetItem":
        {
            "description": "There go the item (item = corpus record) as json object",
            "type": "object",
            "properties":
            {

                // DEBUT. Partie commune à toutes les notices
                // BEGIN. Common parts to all items
                "itemIdTELMA":
                {
                    "description": "The TELMA unique identifier for a item. Not the same as corpus unique indentifier; this is, TELMA use two different identifiers, one common for all TELMA corpora, and another one used only at the level of given corpus. This ID is TELMA common ID",
                    "type": "integer"
                },
                "itemURL":
                {
                    "description": "The unique identifier for a item",
                    "type": "string"
                },
                "itemStatus":
                {
                    "description": "Mark if the item is published or not on TELMA. In TELMA database value 1 means /not published/ and value 2 means /published/. Only can use two defined values /published/ or /not published/",
                    "type": "string",
                    "enum":
                    [
                        "not published",
                        "published"
                    ]
                    // Définir la liste des valeurs autorisées
                    // Define the authorized values list
                },
                "itemType":
                {
                    "description": "The type of item (usually it is an 'acte')",
                    "type": "string"
                },
                // FIN. Partie commune à toutes les notices
                // END. Common parts to all items

                // DEBUT. Les champs spécifiques à chaque corpus. Les clés json ne sont que des exemples et ils varient en fonction du corpus.
                // BEGIN. Specific parts for this corpus. The json keys are given only for exemple purpose and they vary according to corpus.
                "date":
                {
                    "description": "Field description",
                    "type": "string"
                },
                "dateLibre":
                {
                    "description": "Field description",
                    "type": "string"
                },

                // DEBUT. Exemple - Element simple
                // BEGIN. Example - Simple element
                "typeDocument":
                {
                    "description": "Field description",
                    "type": "string"
                },
                // FIN. Exemple - Elément simple
                // END. Example - Simple element

                "incipit":
                {
                    "description": "Field description",
                    "type": "string"
                },
                "initiale":
                {
                    "description": "Field description",
                    "type": "string"
                },

                // DEBUT. Exemple - Elément groupé. C'est un group (présenté comme un objet json) qui consiste de plusieurs sous-champs.
                // BEGIN. Example - Grouped element. This is a group (described as a json object) which consists of several sub-fields.
                "InitialeAutre":
                {
                    // BEGIN. This is a group (described as a json object) which consists of several sub-fields.
                    "description": "This is a group. Add group description here",
                    "type": "object",
                    "properties":
                    {
                        "initialeNue":
                        {
                            "description": "Field description",
                            "type": "string"
                        },
                        "initialeCadelee":
                        {
                            "description": "Field description",
                            "type": "string"
                        },
                        "initialeCadeleeAutre":
                        {
                            "description": "Field description",
                            "type": "string"
                        }
                    }
                },
                // FIN. Exemple - Elément groupé. C'est un group (présenté comme un objet json) qui consiste de plusieurs sous-champs.
                // END. Example - Grouped element. This is a group (described as a json object) which consists of several sub-fields.

                "lettresAllongees":
                {
                    "description": "Field description",
                    "type": "string"
                },
                "hastesAllongees":
                {
                    "description": "Field description",
                    "type": "string"
                },

                // DEBUT. Exemple - Elément tableau (array). Si nécessaire, ajoutez des conditions supplémentaires (uniquement valeur unique, nombre minimum de l’unité, etc.)
                // BEGIN. Example - Array element. If necessary, add additional conditions (unique value only, minimum number of items, etc.)
                "semblablesAutre":
                {
                    "description": "Field description",
                    "type": "array",
                    "items":
                    {
                        "type": "string"
                    }
                },
                // FIN. Exemple - Elément tableau (array). Si nécessaire, ajoutez des conditions supplémentaires (uniquement valeur unique, nombre minimum de l’unité, etc.)
                // END. Example - Array element. If necessary, add additional conditions (unique value only, minimum number of items, etc.)

                "premiereLigneAutre":
                {
                    "description": "Field description",
                    "type": "string"
                },
                "nombreLignes":
                {
                    "description": "Field description",
                    "type": "string"
                },
                "ratures":
                {
                    "description": "Field description",
                    "type": "string"
                },
                "grattagesReecritures":
                {
                    "description": "Field description",
                    "type": "string"
                }
                // FIN. Les champs spécifiques à chaque corpus. Les clés json ne sont que des exemples et ils varient en fonction du corpus.
                // END. Specific parts for this corpus. The json keys are given only for exemple purpose and they vary according to corpus.
            },
            "required":
            [
                /********************************************************************************************************************************************************/
                /* Mettre ici tous les champs obligatoires d'une notice. Par défaut, les champs communs à toutes les notices (itemId, itemURL, itemStatus) sont requis. */
                /* Pour les autres champs obligatoires au corpus, consulter: TELMA/Mes projets/NOM_DU_CORPUS/Types et formulaires                                  */
                /********************************************************************************************************************************************************/
                /* Put here all mandatory fields of a record. By default, the fields common to all records (itemId, url, itemStatus) are required.                      */
                /* For the other mandatory fields in the corpus, see: TELMA/Mes projets/NOM_DU_CORPUS/Types and formulaires                                             */
                /********************************************************************************************************************************************************/
                "itemId", // requis par défaut / required by default
                "itemURL", // requis par défaut / required by default
                "itemStatus", // requis par défaut / required by default
                "date",
                "typeDocument",
                "incipit",
                "grattagesReecritures"
            ]
            // FIN. Chaque notice est un objet json où chaque mot-clé du schéma est un champ spécifique du corpus.
            // END. Each item (record) is a json object where each schema keyword is a specific field of the corpus.
        }
        // FIN. Information sur la notices de jeu des données. Ce fichier ne contient qu'une seule notice (qui est un objet json).
        // END. Information about dataset item (item = record). This file contains only one record (which is a json object).
    }
}